{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["/* eslint @typescript-eslint/no-explicit-any: off */\n\nimport {\n  useCallback,\n  useReducer,\n  Dispatch,\n  Reducer,\n  ReducerState,\n  ReducerAction,\n} from 'react';\n\ntype AsyncFunctions<AsyncAction, Action> = AsyncAction extends {\n    type: infer Types;\n} ? Types extends string ? {\n    [T in Types]: AsyncAction extends infer A ? A extends {\n        type: T;\n    } ? (d: Dispatch<Action>) => (a: A) => Promise<void> : never : never;\n} : never : never;\n\nexport function useReducerAsync<R extends Reducer<unknown, unknown>, I, AsyncAction>(\n  reducer: R,\n  initializerArg: I,\n  initializer: (arg: I) => ReducerState<R>,\n  asyncFunctions: AsyncFunctions<AsyncAction, ReducerAction<R>>,\n): [ReducerState<R>, Dispatch<AsyncAction | ReducerAction<R>>];\n\n/**\n * useReducer with async action functions\n * @example\n * import { useReducerAsync } from 'use-reducer-async';\n *\n * const asyncActions = {\n *   SLEEP: dispatch => async (action) => {\n *     dispatch({ type: 'START_SLEEP' });\n *     await new Promise(r => setTimeout(r, action.ms));\n *     dispatch({ type: 'END_SLEEP' });\n *   },\n *   FETCH: dispatch => async (action) => {\n *     dispatch({ type: 'START_FETCH' });\n *     try {\n *       const response = await fetch(action.url);\n *       const data = await response.json();\n *       dispatch({ type: 'FINISH_FETCH', data });\n *     } catch (error) {\n *       dispatch({ type: 'ERROR_FETCH', error });\n *     }\n *   },\n * };\n * const [state, dispatch] = useReducerAsync(reducer, initialState, asyncActions);\n */\nexport function useReducerAsync<R extends Reducer<any, any>, AsyncAction>(\n  reducer: R,\n  initialState: ReducerState<R>,\n  asyncFunctions: AsyncFunctions<AsyncAction, ReducerAction<R>>,\n): [ReducerState<R>, Dispatch<AsyncAction | ReducerAction<R>>];\n\nexport function useReducerAsync<R extends Reducer<any, any>, I, AsyncAction>(\n  reducer: R,\n  initializerArg: I | ReducerState<R>,\n  initializer: unknown,\n  asyncFunctions?: AsyncFunctions<AsyncAction, ReducerAction<R>>,\n): [ReducerState<R>, Dispatch<AsyncAction | ReducerAction<R>>] {\n  const asyncFuncs = asyncFunctions || initializer as AsyncFunctions<AsyncAction, ReducerAction<R>>;\n  const [state, rawDispatch] = useReducer(\n    reducer,\n    initializerArg as any,\n    asyncFunctions && initializer as any,\n  );\n  const dispatch = useCallback((action: AsyncAction | ReducerAction<R>) => {\n    const asyncFunc = asyncFuncs[(action as any).type] as any;\n    if (asyncFunc) {\n      asyncFunc(rawDispatch)(action as AsyncAction);\n    } else {\n      rawDispatch(action as ReducerAction<R>);\n    }\n  }, [asyncFuncs]);\n  return [state, dispatch];\n}\n"],"names":["reducer","initializerArg","initializer","asyncFunctions","asyncFuncs","useReducer","rawDispatch","useCallback","action","asyncFunc","type"],"mappings":"wDAyDEA,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAaD,GAAkBD,IACRG,aAC3BL,EACAC,EACAE,GAAkBD,GAHNI,OAad,MAAO,MARUC,eAAY,SAACC,GAC5B,IAAMC,EAAYL,EAAYI,EAAeE,MACzCD,EACFA,EAAUH,EAAVG,CAAuBD,GAEvBF,EAAYE,KAEb,CAACJ"}